// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || arm || arm64 || loong64 || mips64le || mipsle || ppc64le || riscv64

package ebpf

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type keplerActiveProc struct {
	Pid  uint32
	Cpu  uint32
	Comm [16]int8
}

// loadKepler returns the embedded CollectionSpec for kepler.
func loadKepler() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_KeplerBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load kepler: %w", err)
	}

	return spec, err
}

// loadKeplerObjects loads kepler and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*keplerObjects
//	*keplerPrograms
//	*keplerMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadKeplerObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadKepler()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// keplerSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type keplerSpecs struct {
	keplerProgramSpecs
	keplerMapSpecs
	keplerVariableSpecs
}

// keplerProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type keplerProgramSpecs struct {
	HandleSchedSwitch *ebpf.ProgramSpec `ebpf:"handle_sched_switch"`
}

// keplerMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type keplerMapSpecs struct {
	ActiveProcs *ebpf.MapSpec `ebpf:"active_procs"`
}

// keplerVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type keplerVariableSpecs struct {
}

// keplerObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadKeplerObjects or ebpf.CollectionSpec.LoadAndAssign.
type keplerObjects struct {
	keplerPrograms
	keplerMaps
	keplerVariables
}

func (o *keplerObjects) Close() error {
	return _KeplerClose(
		&o.keplerPrograms,
		&o.keplerMaps,
	)
}

// keplerMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadKeplerObjects or ebpf.CollectionSpec.LoadAndAssign.
type keplerMaps struct {
	ActiveProcs *ebpf.Map `ebpf:"active_procs"`
}

func (m *keplerMaps) Close() error {
	return _KeplerClose(
		m.ActiveProcs,
	)
}

// keplerVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to loadKeplerObjects or ebpf.CollectionSpec.LoadAndAssign.
type keplerVariables struct {
}

// keplerPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadKeplerObjects or ebpf.CollectionSpec.LoadAndAssign.
type keplerPrograms struct {
	HandleSchedSwitch *ebpf.Program `ebpf:"handle_sched_switch"`
}

func (p *keplerPrograms) Close() error {
	return _KeplerClose(
		p.HandleSchedSwitch,
	)
}

func _KeplerClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed kepler_bpfel.o
var _KeplerBytes []byte
